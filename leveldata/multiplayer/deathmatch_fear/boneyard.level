-- Generated by _skunks_ HW2 Map Editor
-- Map Author:	Fear (Novaras)
levelDesc = "Fear :: Boneyard"
maxPlayers = 6

player = {}

player[0] = {
	id = 0,
	name = "StartPos0",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

player[1] = {
	id = 1,
	name = "StartPos1",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

player[2] = {
	id = 2,
	name = "StartPos2",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

player[3] = {
	id = 3,
	name = "StartPos3",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

player[4] = {
	id = 4,
	name = "StartPos4",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

player[5] = {
	id = 5,
	name = "StartPos5",
	resources = 1500,
	raceID = 1,
	startPos = 1,
}

DEFAULT_NEBULA_SIZE = 750;

function radiationNebula(position, size, colour, nebula_type)
	colour = colour or {0.60, 0.00, 0.00, 1.00};
	size = size or DEFAULT_NEBULA_SIZE;
	nebula_type = nebula_type or "m07_foundry_radiation";
	return addNebula("polysurface5", nebula_type, position, colour, 0.0, size);
end

function dustCloud(position, size, colour, cloud_type)
	colour = colour or {1.00, 0.50, 0.00, 1};
	size = size or 2000;
	cloud_type = cloud_type or "dustcloud_0";
	return addDustCloud("polysurface1", cloud_type, position, colour, 0.0, size);
end

function resourceAsteroid(position, type, ru_fraction)
	type = type or "Asteroid_4";
	ru_fraction = ru_fraction or 1;

	return addAsteroid(type, position, max(0, min(ru_fraction * 100, 100)), 0, 0, 0, 0);
end

function resourcePatch(position, size, ru_fraction)
	size = size or "small"; -- "tiny", "small", "medium", "large"

	if (size == "tiny") then
		resourceAsteroid(position, "Asteroid_3", ru_fraction)
	elseif (size == "small") then -- like hraal
		resourceAsteroid(position, "Asteroid_4", ru_fraction);
	elseif (size == "medium") then --  like shield
		local positions = {
			{
				position[1] + 150,
				position[2] + -150,
				position[3] + 125
			},
			{
				position[1] - 100,
				position[2] + 250,
				position[3] + 300
			},
			{
				position[1],
				position[2] + -200,
				position[3] - 250
			}
		};
		for i, pos in positions do
			local type = "Asteroid_3";
			if (resize == 2) then
				type = "Asteroid_4";
			end
			resourceAsteroid(pos, type, ru_fraction);
		end
	else
		local positions = {
			position, -- large
			{ -- medium
				position[1] + 550,
				position[2] + -125,
				position[3] - 400
			},
			{ -- small
				position[1] - 450,
				position[2] + 200,
				position[3] + 300
			}
		};
		for i, pos in positions do
			if (i == 1) then
				resourceAsteroid(pos, "Asteroid_5", ru_fraction);
			elseif (i == 3) then
				resourceAsteroid(pos, "Asteroid_4", ru_fraction)
			else
				resourceAsteroid(pos, "Asteroid_3", ru_fraction);
			end
		end
	end
end

function makeCentralXNebula(y, length)
	length = length or 10;
	-- central radiation nebula:
	radiationNebula({0, y, 0})

	local step = (DEFAULT_NEBULA_SIZE / 2) - (DEFAULT_NEBULA_SIZE / 20); -- game freaks out if they are spaced exactly per radius

	for mirror = -1, 1, 2 do
		-- +/-z
		for z = step, step * length, step do
			radiationNebula({0, y, mirror * z});
		end
		-- split point
		for i = 1, 10 do
			local x = step * i; -- 250 -> 2500
			local z = mirror * ((step * length) + (step * i)); -- 2500 -> 5000
			radiationNebula({x, y, z});
			radiationNebula({-x, y, z});
		end
	end
end

function makeTriangleClouds(extra_seperation)
	extra_seperation = extra_seperation or 0;
	local positions = {
		{15005, 0, -8041},
		{16659, 0, -6270},
		{17247, 0, -5400},
		{17774, 0, -3560},
		{19571, 0, -1503},
		{18157, 0, 634},
		{17709, 0, 2692},
		{16018, 0, 4117},
		{14478, 0, 5690},
		{17698, 0, 5472},
		{21280, 0, 4581},
		{19303, 0, 5432},
		{23558, 0, 4026},
		{25686, 0, 3324},
		{28940, 0, 2551},
		{30731, 0, 2106},
		{33186, 0, 1284},
		{36147, 0, 77},
		{37618, 0, -389},
		{41351, 0, -1131},
		{39880, 0, -666},
		{44243, 0, -1231},
		{46219, 0, -2082},
		{47842, 0, -2399},
		{46120, 0, -3061},
		{44203, 0, -3180},
		{42463, 0, -3565},
		{40724, 0, -3950},
		{38967, 0, -4059},
		{35975, 0, -4939},
		{38690, 0, -4771},
		{33429, 0, -5235},
		{32177, 0, -5729},
		{30765, 0, -6234},
		{27899, 0, -6550},
		{28421, 0, -7213},
		{24933, 0, -7845},
		{26530, 0, -7746},
		{22757, 0, -8952},
		{20370, 0, -9239},
		{18176, 0, -10069},
		{15789, 0, -10356},
		{14050, 0, -10741},
		{13705, 0, -10345},
		{19785, 0, 2820},
		{21813, 0, 1138},
		{19987, 0, -5648},
		{18031, 0, -7715},
		{21981, 0, -6776},
		{24670, 0, -6193},
		{28737, 0, -4551},
		{30956, 0, -4136},
		{35083, 0, -3465},
		{37595, 0, -2614},
		{33138, 0, -526},
		{29741, 0, -41},
		{27907, 0, 1097},
		{25654, 0, 1236},
		{25446, 0, -584},
		{22606, 0, -1315},
		{24437, 0, 188},
		{22996, 0, 2740},
		{20039, 0, 1307},
		{21573, 0, -2769},
		{20364, 0, -3956},
		{23441, 0, -4461},
		{24995, 0, -3670},
		{26196, 0, -2345},
		{28078, 0, -1673},
		{27149, 0, -4789},
		{29895, 0, -2534},
		{32274, 0, -2109},
		{35308, 0, -1921},
		{20392, 0, -7013},
		{24608, 0, -2582},
		{21915, 0, -524},
		{31632, 0, 493},
		{39806, 0, -2061},
		{12336, 0, -11542},
		{13602, 0, 6887},
		{16218, 0, 6076},
		{12610, 0, 7382},
		{18570, 0, -869},
		{49305, 0, -2726},
		{9304, 0, -12674},
		{11069, 0, -10166},
		{12000, 0, -8153},
		{13583, 0, -6477},
		{14018, 0, -4960},
		{15083, 0, -3163},
		{15308, 0, -790},
		{16123, 0, -1092},
		{15518, 0, 1838},
		{13507, 0, 4724},
		{10582, 0, 8121},
		{8484, 0, 9370},
		{11328, 0, 5893},
		{11789, 0, 2990},
		{12367, 0, 1783},
		{12675, 0, -156},
		{12293, 0, -2834},
		{11479, 0, -4669},
		{10532, 0, -7116},
		{9297, 0, -9080},
		{7918, 0, -10927},
		{7102, 0, -12890},
		-- other
		{-10226, 0, -12240},
		{-11127, 0, -10627},
		{-12516, 0, -8906},
		{-12964, 0, -6848},
		{-12781, 0, -4612},
		{-13112, 0, -1852},
		{-12493, 0, 1106},
		{-11840, 0, 3509},
		{-11203, 0, 6190},
		{-8389, 0, 7337},
		{-8595, 0, -12696},
		{-12000, 0, -12072},
		{-14136, 0, -11230},
		{-16717, 0, -10973},
		{-18577, 0, -9419},
		{-20704, 0, -8716},
		{-23168, 0, -7756},
		{-24152, 0, -7400},
		{-26288, 0, -6558},
		{-28256, 0, -5846},
		{-29728, 0, -5381},
		{-32041, 0, -4272},
		{-35489, 0, -2956},
		{-33227, 0, -3233},
		{-37642, 0, -1837},
		{-40114, 0, -739},
		{-41728, 0, -560},
		{-44646, 0, -45},
		{-46908, 0, 232},
		{-43286, 0, 1290},
		{-40898, 0, 1576},
		{-39159, 0, 1962},
		{-37108, 0, 2505},
		{-34889, 0, 2921},
		{-31898, 0, 3800},
		{-29856, 0, 4483},
		{-27956, 0, 4878},
		{-26065, 0, 5412},
		{-23367, 0, 5856},
		{-21636, 0, 6380},
		{-19249, 0, 6667},
		{-16702, 0, 6963},
		{-15433, 0, 7180},
		{-13206, 0, 7457},
		{-10456, 0, 7070},
		{-39199, 0, 13},
		{-35500, 0, -176},
		{-37451, 0, 260},
		{-32859, 0, -1403},
		{-29756, 0, -2324},
		{-27888, 0, -4016},
		{-25147, 0, -4264},
		{-23020, 0, -4966},
		{-21337, 0, -6253},
		{-19555, 0, -6560},
		{-17082, 0, -7658},
		{-15408, 0, -8806},
		{-15191, 0, -7125},
		{-14858, 0, -4741},
		{-15120, 0, -3088},
		{-15442, 0, -467},
		{-14469, 0, 1957},
		{-13588, 0, 3262},
		{-12615, 0, 5686},
		{-14994, 0, 5261},
		{-16431, 0, 5172},
		{-18188, 0, 5064},
		{-20381, 0, 4233},
		{-21810, 0, 4006},
		{-24500, 0, 3423},
		{-25920, 0, 3057},
		{-27651, 0, 2533},
		{-29223, 0, 2019},
		{-31601, 0, 1594},
		{-33349, 0, 1347},
		{-29918, 0, 308},
		{-28210, 0, -1394},
		{-25276, 0, -2186},
		{-22812, 0, -3146},
		{-20507, 0, -4116},
		{-17883, 0, -5066},
		{-15747, 0, -5908},
		{-17718, 0, -2554},
		{-17216, 0, -298},
		{-17176, 0, 1651},
		{-16286, 0, 2818},
		{-19018, 0, 2927},
		{-20892, 0, 2116},
		{-23262, 0, 1553},
		{-24850, 0, 1316},
		{-27380, 0, 743},
		{-25218, 0, -514},
		{-21326, 0, -1247},
		{-22831, 0, -228},
		{-19646, 0, 108},
		{-19552, 0, -1416},
		{-50331, 0, 81},
		{-47951, 0, -1106},
		{-44869, 0, -1799},
		{-42206, 0, -2740},
		{-39263, 0, -3314},
		{-35615, 0, -4853},
		{-32250, 0, -5300},
		{-9260, 0, 9284},
		{-11354, 0, 9139},
		{-15123, 0, 8732},
		{-13450, 0, 9114},
		{-18612, 0, 8086},
		{-108305, 0, -61047},
	};

	for _, pos in positions do
		local extra = extra_seperation;
		if (pos[1] < 0) then
			extra = -extra;
		end
		local p = {
			pos[1] + extra,
			pos[2],
			pos[3]
		};
		dustCloud(p, 2300);
	end
end

function makeCentralRUs()
	for i = -1, 1, 2 do
		local offset = i * 3000;
		resourcePatch({offset, 0, 0}, "small", 1.5);
		resourcePatch({offset, 0, 1000}, "tiny", 0.75);
		resourcePatch({offset, 0, -1000}, "tiny", 0.75);
		resourcePatch({offset, 0, 2500}, "tiny", 1.25);
		resourcePatch({offset, 0, -2500}, "tiny", 1.25);
	end
end

function makeSmallPatches()
	-- +z patches
	resourcePatch({0, 0, 30000});
	for i = -1, 1, 2 do
		resourcePatch({i * 29000, -6000, 11000});
		resourcePatch({i * 21000, 450, 18000});
	end
	-- -z patches
	resourcePatch({0, 0, -27000}, "medium");
	dustCloud({0, 0, -27000}, 1500);
	for i = -1, 1, 2 do
		local pos = {i * 31000, 0, -15000}
		resourcePatch(pos);
		dustCloud(pos, 1500);
	end
end

function makeDebrisBand()
	local randY = function()
		local rand_max = 200;
		return 0;
	end
	local debris_attribs = {
		{ type = "slv_chunk_lrg01", pos = {28994, randY(), -18307}, val = 2.5 },
		{ type = "slv_chunk_lrg01", pos = {22909, randY(), -19046}, val = 2 },
		{ type = "slv_chunk_lrg01", pos = {13773, randY(), -24734}, val = 1.5 },
		{ type = "slv_chunk_lrg01", pos = {4794, randY(), -24976}, val = 2 },
		{ type = "slv_chunk_lrg02", pos = {19696, randY(), -22855}, val = 3.25 },
		{ type = "slv_chunk_lrg01", pos = {4594, randY(), -25976}, val = 0.9 },
		{ type = "slv_chunk_lrg02", pos = {18500, randY(), -21000}, val = 2.1 },
		{ type = "slv_chunk_lrg02", pos = {24962, randY(), -20286}, val = 1.9 },
		{ type = "slv_chunk_lrg02", pos = {2260, randY(), -27817}, val = 1.5 },
		{ type = "slv_chunk_lrg04", pos = {15508, randY(), -22762}, val = 1.8 },

		{ type = "slv_chunk_lrg02", pos = {-13707, randY(), -23015}, val = 2.5 },
		{ type = "slv_chunk_lrg02", pos = {-24875, randY(), -19968}, val = 2 },
		{ type = "slv_chunk_lrg02", pos = {-22704, randY(), -21587}, val = 1.5 },
		{ type = "slv_chunk_lrg01", pos = {-17964, randY(), -23272}, val = 2 },
		{ type = "slv_chunk_lrg01", pos = {-30770, randY(), -17572}, val = 3.25 },
		{ type = "slv_chunk_lrg04", pos = {-7210, randY(), -26853}, val = 0.9 },
		{ type = "slv_chunk_lrg04", pos = {-20286, randY(), -21516}, val = 2.1 },
		{ type = "slv_chunk_lrg04", pos = {-27402, randY(), -19373}, val = 1.9 },
		{ type = "slv_chunk_sml03", pos = {-119, randY(), -49325}, val = 1.5 },
		{ type = "slv_chunk_lrg04", pos = {-26402, randY(), -21373}, val = 1.8 },

		{ type = "slv_chunk_sml03", pos = {0, randY(), -47500}, val = 2 },
		{ type = "slv_chunk_sml03", pos = {403504, randY(), -53863}, val = 2 }
	};
	for _, attribs in debris_attribs do
		addSalvage(attribs.type, attribs.pos, attribs.val * 100, 0, 0, 0, 0);
	end
end

function DetermChunk()
	local p0_start = {
		pos = {7000, 0, 0},
		rot = {0, 90, 0}
	};
	local p1_start = {
		pos = {-7000, 0, 0},
		rot = {0, -90, 0}
	};

	-- start positions:
	addPoint("StartPos0", p0_start.pos, p0_start.rot);
	addPoint("StartPos1", p1_start.pos, p1_start.rot);
	-- spectators:
	addPoint("StartPos2", {-27876, 0, -32563}, {0, 90, 0});
	addPoint("StartPos3", {-25572, 0, -34488}, {0, 90, 0});
	addPoint("StartPos4", {-24874, 0, -29766}, {0, 90, 0});
	addPoint("StartPos5", {-30244, 0, -29277}, {0, 90, 0});

	-- central 'X' radiation:
	for y = -7500, 7500, 500 do
		makeCentralXNebula(y, 20);
	end

	-- triangle 'home' clouds
	makeTriangleClouds(2500);

	-- patches close to the central X:
	makeCentralRUs();

	-- patches in the triangle clouds:
	resourcePatch({30000, 0, -2000}, "medium");
	addSalvage("Slv_Chunk_Lrg03", {25000, 100, -1900}, 250, 0, 0, 0, 0);
	resourcePatch({-30000, 0, -1000}, "medium");
	addSalvage("Slv_Chunk_Lrg03", {-25000, -100, -900}, 250, 0, 0, 0, 0);

	-- patches in the grooves of the center X:
	resourcePatch({0, 0, 9500}, "large");

	-- the ring of small ru spots:
	makeSmallPatches();

	-- debris band:
	addSalvage("slv_chunk_lrg03", {3881, 3766, -26754}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {-3473, 3681, -24422}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {67, 0, -23690}, 75, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {-2230, -2594, -34603}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {11804, 0, -25535}, 85, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {18226, -4073, -27217}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {21722, 2741, -21758}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {-16971, -3423, -27796}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {-20779, -359, -25236}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg03", {-21024, 950, -19894}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {23409, -2449, -24656}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {8410, 1559, -31331}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {-9889, -2302, -30974}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {-16225, 2808, -24876}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {-23561, 7292, -24965}, 85, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg01", {27323, 0, -20721}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {2472, 0, -20325}, 85, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {-3898, 0, -19922}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {-10020, 0, -26716}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {13089, -2020, -30380}, 75, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {17027, 0, -27142}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg02", {12645, 6119, -24898}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg02", {18003, -100, -17800}, 75, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg02", {27167, -100, -15217}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg02", {-17659, -3396, -16892}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-24111, 697, -18550}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg02", {-22818, -3925, -17307}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {33765, -100, -19625}, 85, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {9520, -100, -26074}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {-12585, 5192, -21865}, 85, 0, 0, 0, 0)
	addSalvage("slv_chunk_lrg05", {-5559, 2113, -29302}, 60, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml01", {4685, -1157, -30391}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml01", {-6421, 3563, -34165}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml01", {-4924, -100, -29048}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml02", {-413, -100, -28790}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml02", {3285, 1859, -31425}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml02", {5353, -100, -33509}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml05", {-620274, 106400, -465330}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {30109, 697, -13186}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {26977, 697, -18204}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {23754, 697, -22088}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {19324, 697, -25594}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {14201, 697, -28606}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {6072, 697, -31935}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {1560, 697, -35623}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-9012, 697, -30229}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-16031, 697, -26980}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-23264, 697, -21728}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-28581, 697, -17855}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-3740, 697, -31938}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {2116, 697, -27901}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {2762, -9011, -31813}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-425, 14266, -34392}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {-6220, -9721, -24892}, 40, 0, 0, 0, 0)
	addSalvage("slv_chunk_sml08", {21351, -9721, -169892}, 40, 0, 0, 0, 0)
	
	setWorldBoundsInner({0, 0, 0}, {90000, 7500, 90000})
end

function NonDetermChunk()

	fogSetActive(0)
	setGlareIntensity(0.25)
	setLevelShadowColour(0,0,0,1)
	loadBackground("m01")
	setSensorsManagerCameraDistances(10000, 100000)
	setDefaultMusic("Data:sound/music/deathmatch_fear/sc-terran-03")
end
